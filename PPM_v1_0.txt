library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity PPM_v1_0 is
	generic (
		-- Users to add parameters here
        
		-- User parameters ends
		-- Do not modify the parameters beyond this line


		-- Parameters of Axi Slave Bus Interface S00_AXI
		C_S00_AXI_DATA_WIDTH	: integer	:= 32;
		C_S00_AXI_ADDR_WIDTH	: integer	:= 6
	);
	port (
		-- Users to add ports here
        
        ---- Generate ----
        -- Probes for SW to RTL inputs --
        slv_reg20 : out std_logic_vector(31 downto 0);  
        slv_reg21 : out std_logic_vector(31 downto 0);  
        slv_reg22 : out std_logic_vector(31 downto 0);  
        slv_reg23 : out std_logic_vector(31 downto 0);  
        slv_reg24 : out std_logic_vector(31 downto 0);  
        slv_reg25 : out std_logic_vector(31 downto 0);
        PPM_Done : out std_logic;
        -- General PPM_output --
        sw_PPM_Output : out std_logic;
        
        ---- Capture ----
        -- General PPM_input --
        PPM_Input : in STD_LOGIC;
        -- Probes for RTL to SW outputs --
        out_channel_1 : out STD_LOGIC_VECTOR (31 downto 0);
        out_channel_2 : out STD_LOGIC_VECTOR (31 downto 0);
        out_channel_3 : out STD_LOGIC_VECTOR (31 downto 0);
        out_channel_4 : out STD_LOGIC_VECTOR (31 downto 0);
        out_channel_5 : out STD_LOGIC_VECTOR (31 downto 0);
        out_channel_6 : out STD_LOGIC_VECTOR (31 downto 0);
        probe_state : out std_logic_vector (2 downto 0);
        probe_done : out std_logic;
        
		-- User ports ends
		-- Do not modify the ports beyond this line


		-- Ports of Axi Slave Bus Interface S00_AXI
		s00_axi_aclk	: in std_logic;
		s00_axi_aresetn	: in std_logic;
		s00_axi_awaddr	: in std_logic_vector(C_S00_AXI_ADDR_WIDTH-1 downto 0);
		s00_axi_awprot	: in std_logic_vector(2 downto 0);
		s00_axi_awvalid	: in std_logic;
		s00_axi_awready	: out std_logic;
		s00_axi_wdata	: in std_logic_vector(C_S00_AXI_DATA_WIDTH-1 downto 0);
		s00_axi_wstrb	: in std_logic_vector((C_S00_AXI_DATA_WIDTH/8)-1 downto 0);
		s00_axi_wvalid	: in std_logic;
		s00_axi_wready	: out std_logic;
		s00_axi_bresp	: out std_logic_vector(1 downto 0);
		s00_axi_bvalid	: out std_logic;
		s00_axi_bready	: in std_logic;
		s00_axi_araddr	: in std_logic_vector(C_S00_AXI_ADDR_WIDTH-1 downto 0);
		s00_axi_arprot	: in std_logic_vector(2 downto 0);
		s00_axi_arvalid	: in std_logic;
		s00_axi_arready	: out std_logic;
		s00_axi_rdata	: out std_logic_vector(C_S00_AXI_DATA_WIDTH-1 downto 0);
		s00_axi_rresp	: out std_logic_vector(1 downto 0);
		s00_axi_rvalid	: out std_logic;
		s00_axi_rready	: in std_logic
	);
end PPM_v1_0;

architecture arch_imp of PPM_v1_0 is

	-- component declaration
	component PPM_v1_0_S00_AXI is
		generic (
		C_S_AXI_DATA_WIDTH	: integer	:= 32;
		C_S_AXI_ADDR_WIDTH	: integer	:= 6
		);
		port (
		
		--- Generate ---
		slv_reg20_out : out std_logic_vector(31 downto 0);
		slv_reg21_out : out std_logic_vector(31 downto 0);
		slv_reg22_out : out std_logic_vector(31 downto 0);
		slv_reg23_out : out std_logic_vector(31 downto 0);
		slv_reg24_out : out std_logic_vector(31 downto 0);
		slv_reg25_out : out std_logic_vector(31 downto 0);		
		PPM_Done_in : out std_logic;
		sw_PPM_Output_in : out std_logic;

		
		--- Capture ---
		PPM_Input_out : out STD_LOGIC;
		out_channel_1_in : out STD_LOGIC_VECTOR (31 downto 0);
        out_channel_2_in : out STD_LOGIC_VECTOR (31 downto 0);
        out_channel_3_in : out STD_LOGIC_VECTOR (31 downto 0);
        out_channel_4_in : out STD_LOGIC_VECTOR (31 downto 0);
        out_channel_5_in : out STD_LOGIC_VECTOR (31 downto 0);
        out_channel_6_in : out STD_LOGIC_VECTOR (31 downto 0);
        probe_state_in : out std_logic_vector (2 downto 0);
        probe_done_in : out std_logic;
        
		S_AXI_ACLK	: in std_logic;
		S_AXI_ARESETN	: in std_logic;
		S_AXI_AWADDR	: in std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);
		S_AXI_AWPROT	: in std_logic_vector(2 downto 0);
		S_AXI_AWVALID	: in std_logic;
		S_AXI_AWREADY	: out std_logic;
		S_AXI_WDATA	: in std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
		S_AXI_WSTRB	: in std_logic_vector((C_S_AXI_DATA_WIDTH/8)-1 downto 0);
		S_AXI_WVALID	: in std_logic;
		S_AXI_WREADY	: out std_logic;
		S_AXI_BRESP	: out std_logic_vector(1 downto 0);
		S_AXI_BVALID	: out std_logic;
		S_AXI_BREADY	: in std_logic;
		S_AXI_ARADDR	: in std_logic_vector(C_S_AXI_ADDR_WIDTH-1 downto 0);
		S_AXI_ARPROT	: in std_logic_vector(2 downto 0);
		S_AXI_ARVALID	: in std_logic;
		S_AXI_ARREADY	: out std_logic;
		S_AXI_RDATA	: out std_logic_vector(C_S_AXI_DATA_WIDTH-1 downto 0);
		S_AXI_RRESP	: out std_logic_vector(1 downto 0);
		S_AXI_RVALID	: out std_logic;
		S_AXI_RREADY	: in std_logic
		);
	end component PPM_v1_0_S00_AXI;

    component GeneratePPM is
        Port (
            CLK : in std_logic; 
            RESET : in std_logic; 
            slv_reg20, slv_reg21, slv_reg22, slv_reg23, slv_reg24, slv_reg25 : in std_logic_vector(31 downto 0);  
            PPM_Done : out std_logic;
            sw_PPM_Output : out std_logic
        );
    end component;
    
    signal slv_reg20_out : std_logic_vector(31 downto 0);
    signal slv_reg21_out : std_logic_vector(31 downto 0);
    signal slv_reg22_out : std_logic_vector(31 downto 0);
    signal slv_reg23_out : std_logic_vector(31 downto 0);
    signal slv_reg24_out : std_logic_vector(31 downto 0);
    signal slv_reg25_out : std_logic_vector(31 downto 0);
    signal PPM_Done_in : std_logic;
    signal sw_PPM_Output_in : std_logic;
    
    component Capture_PPM_simp is
        Port ( PPM_Input : in STD_LOGIC;
               CLK,CLR : in STD_LOGIC; 
               out_channel_1 : out STD_LOGIC_VECTOR (31 downto 0);
               out_channel_2 : out STD_LOGIC_VECTOR (31 downto 0);
               out_channel_3 : out STD_LOGIC_VECTOR (31 downto 0);
               out_channel_4 : out STD_LOGIC_VECTOR (31 downto 0);
               out_channel_5 : out STD_LOGIC_VECTOR (31 downto 0);
               out_channel_6 : out STD_LOGIC_VECTOR (31 downto 0);
    
               probe_state : out std_logic_vector (2 downto 0);
               probe_done : out std_logic 
        );
    end component;

    signal PPM_Input_out : STD_LOGIC;
    signal out_channel_1_in : STD_LOGIC_VECTOR (31 downto 0);
    signal out_channel_2_in : STD_LOGIC_VECTOR (31 downto 0);
    signal out_channel_3_in : STD_LOGIC_VECTOR (31 downto 0);
    signal out_channel_4_in : STD_LOGIC_VECTOR (31 downto 0);
    signal out_channel_5_in : STD_LOGIC_VECTOR (31 downto 0);
    signal out_channel_6_in : STD_LOGIC_VECTOR (31 downto 0);
    signal probe_state_in : std_logic_vector (2 downto 0);
    signal probe_done_in : std_logic;

begin

-- Instantiation of Axi Bus Interface S00_AXI
PPM_v1_0_S00_AXI_inst : PPM_v1_0_S00_AXI
	generic map (
		C_S_AXI_DATA_WIDTH	=> C_S00_AXI_DATA_WIDTH,
		C_S_AXI_ADDR_WIDTH	=> C_S00_AXI_ADDR_WIDTH
	)
	port map (
	    slv_reg20_out => slv_reg20_out,
	    slv_reg21_out => slv_reg21_out,
	    slv_reg22_out => slv_reg22_out,
	    slv_reg23_out => slv_reg23_out,
	    slv_reg24_out => slv_reg24_out,
	    slv_reg25_out => slv_reg25_out,
	    PPM_Done_in => PPM_Done_in,
	    sw_PPM_Output_in => sw_PPM_Output_in,
	    
	    PPM_Input_out => PPM_Input_out,
	    out_channel_1_in => out_channel_1_in,
	    out_channel_2_in => out_channel_2_in,
	    out_channel_3_in => out_channel_3_in,
	    out_channel_4_in => out_channel_4_in,
	    out_channel_5_in => out_channel_5_in,
	    out_channel_6_in => out_channel_6_in,
	    probe_state_in => probe_state_in,
	    probe_done_in => probe_done_in,
	    
		S_AXI_ACLK	=> s00_axi_aclk,
		S_AXI_ARESETN	=> s00_axi_aresetn,
		S_AXI_AWADDR	=> s00_axi_awaddr,
		S_AXI_AWPROT	=> s00_axi_awprot,
		S_AXI_AWVALID	=> s00_axi_awvalid,
		S_AXI_AWREADY	=> s00_axi_awready,
		S_AXI_WDATA	=> s00_axi_wdata,
		S_AXI_WSTRB	=> s00_axi_wstrb,
		S_AXI_WVALID	=> s00_axi_wvalid,
		S_AXI_WREADY	=> s00_axi_wready,
		S_AXI_BRESP	=> s00_axi_bresp,
		S_AXI_BVALID	=> s00_axi_bvalid,
		S_AXI_BREADY	=> s00_axi_bready,
		S_AXI_ARADDR	=> s00_axi_araddr,
		S_AXI_ARPROT	=> s00_axi_arprot,
		S_AXI_ARVALID	=> s00_axi_arvalid,
		S_AXI_ARREADY	=> s00_axi_arready,
		S_AXI_RDATA	=> s00_axi_rdata,
		S_AXI_RRESP	=> s00_axi_rresp,
		S_AXI_RVALID	=> s00_axi_rvalid,
		S_AXI_RREADY	=> s00_axi_rready
	);

	-- Add user logic here
    GeneratePPM_inst :  GeneratePPM
        port map (
            CLK => s00_axi_aclk,
            RESET => s00_axi_aresetn,
            slv_reg20 => slv_reg20_out,
            slv_reg21 => slv_reg21_out,
            slv_reg22 => slv_reg22_out,
            slv_reg23 => slv_reg23_out,
            slv_reg24 => slv_reg24_out,
            slv_reg25 => slv_reg25_out,
            PPM_Done => PPM_Done_in,
            sw_PPM_Output => sw_PPM_Output_in
        );
        
    Capture_PPM_simp_inst : Capture_PPM_simp
        port map (
           PPM_Input => PPM_Input_out,
           CLK => s00_axi_aclk,
           CLR => s00_axi_aresetn,
           out_channel_1 => out_channel_1_in,
           out_channel_2 => out_channel_2_in,
           out_channel_3 => out_channel_3_in,
           out_channel_4 => out_channel_4_in,
           out_channel_5 => out_channel_5_in,
           out_channel_6 => out_channel_6_in,

           probe_state => probe_state_in,
           probe_done => probe_done_in
        );
	-- User logic ends

end arch_imp;
